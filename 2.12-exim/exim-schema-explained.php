<?php

return [
    // Идентификатор секции, к которой относится паттерн.
    // Используется для группировки нескольких паттернов в одну страницу с вкладками (см. products).
    'section'                      => 'entity_section',
    // Название паттерна
    'name'                         => __('entities'),
    // Идентификатор паттерна
    'pattern_id'                   => 'entities',
    // Набор полей, образующих первичный ключ в таблице сущности
    'key'                          => ['entity_id'],
    // Порядковый номер вкладки внутри секции
    'order'                        => 3,
    // Таблица, хранящая сущности
    'table'                        => 'entities',
    // Требуемые привилегии на доступ к экспорту и импорту сущности, описанной паттерном
    'permissions'                  => [
        // Привилегия для импорта
        'import' => 'manage_entities',
        // Привилегия для экспорта
        'export' => 'view_entities',
    ],
    // Признак того, что при импорте можно только обновлять существующие записи в таблице
    'update_only'                  => true,
    // Признак того, что при импорте не нужно ничего писать в БД
    'import_skip_db_processing'    => false,
    // Отношения сущности
    'references'                   => [
        // Идентификатор отношения
        'entity_relation' => [
            // Название таблицы, в которой хранится отношение
            'table'                     => 'entity_relations',
            // Поля, по которым делается JOIN таблицы отношения
            'reference_fields'          => [
                // Название колонки таблицы и значение, которые будут подставлены в запрос. Специальные значения:
                // #key — идентификатор сущности
                // #lang_code — код языка
                // @option_id — значение настройки с идентификатором option_id
                // &column — колонка в таблице сущности
                // #some_value — подставит some_value без экранирования в запрос (Например, #null)
                'entity_id'   => '#key',
                'company_id'  => '&company_id',
                'entity_type' => 'F',
                // Пример: будет преобразовано в
                //  ON entity_relations.entity_id = {ID сущности}
                // AND entity_relations.company_id = entities.company_id
                // AND entity_relations.entity_type = 'F'
            ],
            // Тип JOIN'а при экспорте
            'join_type'                 => 'INNER',
            // Импорт: Поля записи из файла импорта, которые нужно использовать при поиске существующих отношений.
            // Специальные значения:
            // #key — идентификатор сущности
            // @option_id — значение настройки с идентификатором option_id
            'alt_key'                   => [
                'entity_type',
                '#key',
                '@option'
                // Пример: будет преобразовано в
                // WHERE entity_relations.entity_type = {entity_type из записи импорта}
                //   AND entity_relations.{колонка первичного ключа} = {значение первичного ключа}
                //   AND entity_relations.option = {значение настройки option}
            ],
            // Импорт: Признак того, что данные отношения не нужно обновлять
            'import_skip_db_processing' => true,
        ],
    ],
    // Экспорт: Условия для получения записей из таблицы
    'condition'                    => [
        // Обычные условия. Ключ — название колонки в БД, значение — значение для выбора записей
        'conditions'            => [
            'status' => 'A',
        ],
        // Добавить условие фильтрации по company_id с ID текущего продавца/компании
        'use_company_condition' => true,
    ],
    // Настройки элемента для выбора диапазона экспортируемых объектов
    'range_options'                => [
        // Маршрут, на котором выводятся сущности
        'selector_url' => 'entities.manage',
        // Название сущности во множественном числе
        'object_name'  => __('entities'),
    ],
    // Настройки экспорта/импорта
    'options'                      => [
        // Идентификатор настройки
        'exim_option' => [
            // Идентификатор языковой переменной для названия настройки
            'title'         => 'exim_option_title',
            // Идентификатор языковой переменной для описания настройки
            'description'   => 'exim_option_description',
            // Подсказка к настройке
            'notes'         => __('exim_option_notes'),
            // Тип настройки. Возможные значения:
            // languages — селектор языков
            // input — текстовое поле
            // checkbox — флаг
            // select — селектор
            'type'          => 'languages',
            // Варианты для селектора
            'variants'      => [
                // Значение варианта и идентификатор языковой переменной для названия варианта
                'variant_id' => 'variant',
            ],
            // Порядковый номер настройки
            'position'      => 10,
            // Стандартное значение настройки
            'default_value' => [DEFAULT_LANGUAGE],
            // Признак того, что опция доступна только при импорте
            'import_only'   => false,
            // Признак того, что опция доступна только при экспорте
            'export_only'   => false,
        ],
    ],
    // Поля экспорта/импорта
    'export_fields'                => [
        // Название колонки в файле экспорта/импорта
        'Entity property' => [
            // Признак обязательности поля
            'required'      => true,
            // Импорт: Используется ли поле как первичный ключ при поиске записей в таблице при импорте
            'alt_key'       => true,
            // Импорт: Поле, которое будет использоваться для поиска первичного ключа, если в файле импорта не задано значение для текущего поля
            'alt_field'     => 'entity_id',
            // Таблица, в которой хранится данное поле. Если не указано — берется из table паттерна
            'table'         => 'entities',
            // Название колонки в таблице, которая хранит это поле
            'db_field'      => 'entity_property',
            // Тип поля. Возможные значения:
            // languages  — в поле записан код языка
            // type не указан — обычное поле
            'type'          => 'languages',
            // Признак того, что поле имеет разные значения на разных языках
            'multilang'     => true,
            // Импорт: Значение по умолчанию при импорте, если поле не указано в файле импорта
            'default'       => 0,
            // Экспорт: Связано ли данное поле с какими-то колонками в БД
            'linked'        => true,
            // Импорт: Функция-обработчик для преобразования значения поля из файла импорта
            'convert_put'   => [
                // Название функции
                'fn_entity_property_convert_put',
                // Аргументы функции. Специальные значения:
                // #key — идентификатор сущности
                // #lang_code — код языка
                // @option_id — значение настройки с идентификатором option_id
                // &column — колонка в таблице сущности
                // #some_value — подставит some_value без экранирования в запрос (Например, #null)
                // #row — экспортируемая запись целиком
                // #this — текущее поле в экспортируемой записи
                // #field — название поля
                '#key',
                '#lang_code',
                'F',
            ],
            // Импорт: Функция-обработчик, которая проверит данные в поле перед записью в БД.
            // Может остановить импорт целиком или пропустить конкретную запись из файла импорта
            'pre_insert'    => [
                // Аналогично convert_put
            ],
            // Импорт: Функция-обработчик для обновления связанных данных на основе значения поля в записи из файла импорта
            'process_put'   => [
                // Аналогично convert_put
            ],
            // Импорт: Нужно ли подставлять результат вызова обработчика process_put в импортированную запись из файла импорта
            'return_result' => true,
            // Импорт: Поле в записи из файла импорта, в которое нужно подставить результат вывзов обработчика process_put при return_result = true
            'return_field'  => 'entity_property',
            // Экспорт: Провайдер значения для поля, которое не запрашивается из БД напрямую
            'process_get'   => [
                // Аналогично convert_put
            ],
            // Признак того, что поле доступно только при экспорте
            'export_only' => false,
        ],
    ],
    // Импорт и Экспорт: Предобработка
    'pre_processing'               => [
        // Идентификатор обработчика
        'pre_processing_callback' => [
            // Название функции
            'function'    => 'fn_pre_processing_callback',
            // Аргументы функции. Специальные значения:
            // $import_data (только при импорте) — записи из файла импорта
            // $pattern (только при импорте) — паттерн из схемы
            // $processed_data (только при импорте) — переменная со статистикой импорта
            // @option_id — значение настройки с идентификатором option_id
            'args'        => [
                '@price_delimiter',
            ],
            // Признак того, что обработчик должен выполняться только при импорте
            'import_only' => false,
            // Признак того, что обработчик должен выполняться только при экспорте
            'export_only' => false,
        ],
    ],
    // Импорт: Определение первичного ключа
    'import_get_primary_object_id' => [
        // Идентификатор обработчика
        'import_get_primary_object_id_callback' => [
            // Название функции-обработчика
            'function' => 'fn_import_get_primary_object_id_callback',
            // Аргументы функции. Специальные значения:
            // $pattern — паттерн из схемы
            // $alt_keys — условия определения первичного ключа
            // $object — данные записи из файла импорта на главном языке импорта
            // $skip_get_primary_object_id — признак того, что для сущности не нужно определять первичный ключ
            // @option_id — значение настройки с идентификатором option_id
            'args'     => [
                '$pattern',
                '$alt_keys',
                '$object',
                '$skip_get_primary_object_id',
            ],
        ],
    ],
    // Импорт: Предобработка записи импорта
    'import_process_data'          => [
        // Идентификатор обработчика
        'import_process_data_callback' => [
            // Название функции-обработчика
            'function' => 'fn_import_process_data_callback',
            // Аргументы функции. Специальные значения:
            // $primary_object_id — первичный ключ сущности
            // $object — данные записи из файла импорта на главном языке импорта
            // $pattern — паттерн из схемы
            // $options — значения опций импорта
            // $processed_data — переменная со статистикой импорта
            // $processing_groups — правила обновления связанных данных
            // $skip_record — признак того, что данную запись из файла импорта нужно пропустить
            // $stop_import — признак того, что импорт нужно прервать
            // $data — полная информация импортируемой записи (для всех языков)
            // @option_id — значение настройки с идентификатором option_id
            'args'     => [
                '$primary_object_id',
                '$object',
                '$pattern',
                '$options',
                '$processed_data',
                '$processing_groups',
                '$skip_record',
                '$stop_import',
                '$data',
            ],
        ],
    ],
    // Импорт: Постобработка записи
    'import_after_process_data'    => [
        // Идентификатор обработчика
        'import_after_process_data_callback' => [
            // Название функции
            'function' => 'fn_import_after_process_data_callback',
            // Аргументы функции. Специальные значения:
            // $primary_object_id — первичный ключ сущности
            // $object — данные записи из файла импорта на главном языке импорта
            // $pattern — паттерн из схемы
            // $options — значения опций импорта
            // $processed_data — переменная со статистикой импорта
            // $processing_groups — правила обновления связанных данных
            // $skip_db_processing_record — признак того, что для записи нужно пропустить обработку связанных данных
            // $object_exists — признак того, что произошло обновление (а не создание) данных в БД
            // @option_id — значение настройки с идентификатором option_id
            'args'     => [
                '$primary_object_id',
                '$object',
                '$pattern',
                '$options',
                '$processed_data',
                '$processing_groups',
                '$skip_db_processing_record',
                '$object_exists',
            ],
        ],
    ],
    // Импорт и Экспорт: Постобработка
    'post_processing'              => [
        // Идентификатор обработчика
        'post_processing_callback' => [
            // Название функции
            'function' => 'fn_post_processing_callback',
            // Аргументы функции. Специальные значения:
            // $primary_object_ids — первичные ключи сущностей
            // $import_data — импортированные данные
            // $processed_data — переменная со статистикой импорта
            // $final_import_notification — текст уведомления, показываемого после импорта
            // $pattern — паттерн из схемы
            // @option_id — значение настройки с идентификатором option_id
            'args'     => [
                '$primary_object_ids',
                '$import_data',
                '$processed_data',
                '$final_import_notification',
                '$pattern',
            ],
        ],
    ],
    // Экспорт: Премодерация
    'export_pre_moderation'        => [
        // Идентификатор обработчика
        'export_pre_moderation_callback' => [
            // Название функции
            'function' => 'fn_export_pre_moderation_callback',
            // Аргументы функции. Специальные значения:
            // $pattern — паттерн из схемы
            // $export_fields — экспортируемые поля
            // $options — значения опций экспорта
            // $can_continue — признак того, что экспорт разрешен
            // @option_id — значение настройки с идентификатором option_id
            'args'     => [
                '$pattern',
                '$export_fields',
                '$options',
                '$can_continue',
            ],
        ],
    ],
    // Экспорт: Модификация частей запроса
    'pre_export_process'           => [
        // Идентификатор обработчика
        'pre_export_process_callback' => [
            // Название функции
            'function' => 'fn_pre_export_process_callback',
            // Аргументы функции. Специальные значения:
            // $pattern — паттерн из схемы
            // $export_fields — экспортируемые поля
            // $options — значения опций экспорта
            // $conditions — условия выборки сущностей из базы
            // $joins — JOIN'ы для запроса к БД
            // $table_fields — колонки, которые нужно запросить из БД
            // $processes — правила получения данных
            // @option_id — значение настройки с идентификатором option_id
            'args'     => [
                '$pattern',
                '$export_fields',
                '$options',
                '$conditions',
                '$joins',
                '$table_fields',
                '$processes',
            ],
        ],
    ],
    // Экспорт: Обработка выгрузки
    'export_processing'            => [
        // Идентификатор обработчика
        'export_processing_callback' => [
            // Название функции
            'function' => 'fn_export_processing_callback',
            // Аргументы функции. Специальные значения:
            // $data — полученные из БД данные
            // $result — данные из БД после гидрации через process_get
            // $export_fields — экспортируемые поля
            // $multi_lang — список кодов языков, на которых выгружаются данные
            // $pattern — паттерн из схемы
            // @option_id — значение настройки с идентификатором option_id
            'args'     => [
                '$data',
                '$result',
                '$export_fields',
                '$multi_lang',
                '$pattern',
            ],
        ],
    ],
];
